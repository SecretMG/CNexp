# encoding: utf-8
# author: Zheng Zhihan

"""
PDU结构定义
CRC检验

说明：
CRC验证根据要求采用CRC16-CCITT，多项式为x16+x12+x5+1，PDU采用高位在前的传输格式，则生成多项式为0x11021

1.把第一个8位二进制数据（既通讯信息帧的第一个字节）与16位的CRC寄存器的低8位相异或，把结果放于CRC寄存器
2.把CRC寄存器的内容右移一位（朝低位）用0填补最高位，并检查右移后的移出位
3.如果移出位为0：重复第2步（再次右移一位）
  如果移出位为1，CRC寄存器与生成多项式进行异或
4.重复步骤2和3，直到右移8次。
5.对下一个8位进行处理

crc_list即为对8位数据求得的CRC校验码(模二除法)

crc = crc_list[((crc >> 8) ^ bin_pack[i]) & 0xFF] ^ (crc << 8) % (0xFFFF + 1)
              取crc高八位与本次的8位数据异或             低八位左移变为高八位并与结果异或
"""

import struct
from args import args

# crc 表
crc_list = [0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
            0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
            0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
            0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
            0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
            0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
            0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
            0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
            0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
            0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
            0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
            0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
            0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
            0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
            0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
            0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
            0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
            0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
            0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
            0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
            0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
            0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
            0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
            0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
            0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
            0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
            0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
            0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
            0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
            0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
            0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
            0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0]


def crc_check(bin_pack):
    """
    CRC16-CCITT检查.

    :param bin_pack:二进制字节串
    :return: bool
    """
    crc = 0
    for i in range(len(bin_pack)):
        crc = crc_list[((crc >> 8) ^ bin_pack[i]) & 0xFF] ^ (crc << 8) % (0xFFFF + 1)

    if crc != 0:
        return False
    else:
        return True


def unpack_pdu(bin_pack):
    """
    解包

    :param bin_pack:
    :return: seq, ack, 未解码info
    """
    seq, ack, info, check_num = struct.unpack('>HH%dsH' % args.data_size, bin_pack)
    return seq, ack, info


class PDU:
    """
    数据传输单元, 二进制串bin_pack传输，大小为self.size
                Byte
    seq         2
    ack         2
    info        data_size
    checksum    2

    """

    size = 2+2+args.data_size+2

    def __init__(self, seq=0, ack=0, info=''):
        self.seq = seq
        self.ack = ack
        self.info = info
        self.check_num = self.__get_check_sum()
        self.bin_pack = struct.pack('>HH%dsH' % args.data_size, seq, ack, info.encode('utf-8'), self.check_num)

    def update(self, seq=0, ack=0, info=''):
        if seq == -1:
            seq = self.seq
        if ack == -1:
            ack = self.ack
        if info == '':
            info = self.info
        self.__init__(seq, ack, info)

    def __get_check_sum(self):
        # CRC16‐CCITT 计算self.check_num
        # 查表法 多项式1021

        pre_bin_pack = struct.pack('>HH%ds' % args.data_size, self.seq, self.ack, self.info.encode('utf-8'))
        crc = 0
        for i in range(len(pre_bin_pack)):
            crc = crc_list[((crc >> 8) ^ pre_bin_pack[i]) & 0xFF] ^ (crc << 8) % (0xFFFF + 1)
        return crc

